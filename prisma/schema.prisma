generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ! enums

enum Roles {
  USER
  ADMIN
  SUPER_ADMIN

  @@map("roles")
}

enum VideoStatus {
  UPLOADING
  UPLOADED
  CANCELLED
  FAILED
  BLOCKED

  @@map("video-status")
}

enum VideoVisibility {
  PUBLIC
  PRIVATE
  SUBS_ONLY

  @@map("video_visibility")
}

enum PlaylistVisibility {
  PUBLIC
  PRIVATE
  SUBS_ONLY
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED

  @@map("user_status")
}

enum ChannelStatus {
  ACTIVE
  INACTIVE
  BLOCKED

  @@map("channel_status")
}

enum CommentStatus {
  APPROVED
  BLOCKED

  @@map("comment_status")
}

enum ReactionType {
  LIKE
  DISLIKE
}

enum AdminActions {
  BLOCKED
  UNBLOCKED
  DELETED
  UPDATED
}

enum TargetType {
  USER
  VIDEO
  CHANNEL
  PLAYLIST
  COMMENT
}

// ! models

model User {
  id          String     @id @default(uuid()) @db.Uuid
  firstName   String     @map("first_name") @db.VarChar(100)
  lastName    String?    @map("last_name") @db.VarChar(100)
  userName    String     @unique @map("username") @db.VarChar(100)
  email       String     @unique @db.VarChar(100)
  phoneNumber String     @unique @map("phone_number") @db.VarChar(100)
  password    String     @db.VarChar(100)
  avatarImage String?    @map("avatar_image") @db.VarChar(255)
  role        Roles      @default(USER)
  status      UserStatus @default(INACTIVE) @map("user_status")

  isEmailVerified Boolean @default(false) @map("is_email_verified")
  isPhoneVerified Boolean @default(false) @map("is_phone_verified")

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  Video        Video[]
  Comment      Comment[]
  Subscription Subscription[]
  Channel      Channel?
  Playlist     Playlist[]
  VideReaction VideReaction[]
  AuditLog     AuditLog[]

  @@map("users")
}

model Video {
  id           String  @id @default(uuid()) @db.Uuid
  title        String
  description  String?
  thumbnailUrl String? @map("thumbnail_url")
  videoUrl     String  @map("video_url")
  duration     Int // seconds

  authorId  String @map("author_id") @db.Uuid
  channelId String @map("channel_id") @db.Uuid

  status        VideoStatus     @default(UPLOADING)
  visibility    VideoVisibility @default(PUBLIC)
  views         Int             @default(0)
  likesCount    Int             @default(0) @map("likes_count")
  dislikesCount Int             @default(0) @map("dislikes_count")

  uploadedAt DateTime @default(now()) @map("uploaded_at")

  author        User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Comment       Comment[]
  Channel       Channel         @relation(fields: [channelId], references: [id])
  PlaylistVideo PlaylistVideo[]
  VideReaction  VideReaction[]

  @@map("videos")
}

model Comment {
  id         String        @id @default(uuid()) @db.Uuid
  content    String
  authorId   String        @map("author_id") @db.Uuid
  videoId    String        @map("video_id") @db.Uuid
  likesCount Int           @default(0) @map("likes_count")
  status     CommentStatus @default(APPROVED) @map("comment_status")
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")

  author User  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  video  Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Channel {
  id                 String        @id @default(uuid()) @db.Uuid
  channelName        String        @map("channel_name") @db.VarChar(100)
  channelUserName    String        @unique @map("channel_username") @db.VarChar(100)
  channelImageUrl    String?       @map("channel_image_url") @db.VarChar(255)
  channelDescription String?       @map("channel_description") @db.VarChar(255)
  authorId           String        @unique @map("author_id") @db.Uuid
  status             ChannelStatus @default(ACTIVE) @map("channel_status")

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Subscription Subscription[]
  Video        Video[]

  @@map("channels")
}

model Subscription {
  id        String @id @default(uuid()) @db.Uuid
  userId    String @map("user_id") @db.Uuid
  channelId String @map("channel_id") @db.Uuid

  subscriber User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel    Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, channelId])
  @@map("subscriptions")
}

model Playlist {
  id            String             @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  authorId      String             @map("author_id") @db.Uuid
  visibility    PlaylistVisibility @default(PRIVATE)
  PlaylistVideo PlaylistVideo[]

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("playlists")
}

model PlaylistVideo {
  id         String @id @default(uuid()) @db.Uuid
  videoId    String @map("video_id") @db.Uuid
  playlistId String @map("playlist_id") @db.Uuid

  video    Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([videoId, playlistId])
  @@map("playlist_videos")
}

model VideReaction {
  id      String       @id @default(uuid()) @db.Uuid
  userId  String       @map("user_id") @db.Uuid
  videoId String       @map("video_id") @db.Uuid
  type    ReactionType

  user  User  @relation(fields: [userId], references: [id])
  video Video @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
  @@map("vide_reactions")
}

model AuditLog {
  id         String       @id @default(uuid()) @db.Uuid
  adminId    String       @map("admin_id") @db.Uuid
  action     AdminActions
  targetId   String       @map("target_id") @db.Uuid
  targetType TargetType   @map("target_type")
  details    String       @db.Text

  admin User @relation(fields: [adminId], references: [id])

  @@map("audit_logs")
}
